
/private/var/folders/l0/t3c1vk2x6_1d9rfpkt51t4jr0000gn/T/arduino/sketches/FDF5E801F7CD2E8D12FDD26D89764811/Holly-BLE-v2-2-2.ino.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001c5c l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00033f80 l    d  .fini	00000000 .fini
00033f84 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200056c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
600579d8 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
60001428 l     F .text.code	000001f8 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00025844 l     F .text.itcm	00000044 _GLOBAL__sub_I__ZN7TwoWire5beginEv
00000000 l    df *ABS*	00000000 analog.c
2000bca1 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000bad0 l     O .bss	00000004 s_hotCount
2000bad4 l     O .bss	00000004 s_hotTemp
2000bad8 l     O .bss	00000004 s_hot_ROOM
2000badc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 usb.c
0002aec8 l     F .text.itcm	00000088 schedule_transfer
0002af50 l     F .text.itcm	00000036 run_callbacks
0002af88 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
2000ba58 l     O .bss	00000008 endpoint0_buffer
2000ba60 l     O .bss	00000004 endpoint0_notify_mask
2000af48 l     O .bss	00000008 endpoint0_setupdata
2000ba64 l     O .bss	00000004 endpointN_notify_mask
2000ba84 l     O .bss	00000008 reply_buffer
2000bca7 l     O .bss	00000001 sof_usage
2000bcb5 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
2000ba6c l     O .bss	00000000 object.0
60001c38 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 Holly-BLE-v2-2-2.ino.cpp
000000a4 l     F .text.itcm	00000024 _GLOBAL__sub_I_bmc
00000000 l    df *ABS*	00000000 BMC-ST7735_t3.cpp
000190c4 l     F .text.itcm	00000024 __tcf_0
000190e8 l     F .text.itcm	00000044 _GLOBAL__sub_I__dma_dummy_rx
00000000 l    df *ABS*	00000000 SPI.cpp
00026c80 l     F .text.itcm	00000048 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 bluetooth.cpp
00026ccc l     F .text.itcm	00000024 _GLOBAL__sub_I_em_rx_tx2
00000000 l    df *ABS*	00000000 joystick.cpp
000281cc l     F .text.itcm	00000028 _GLOBAL__sub_I_ack_rvd
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00029d2c l     F .text.itcm	00000074 _GLOBAL__sub_I_IRQHandler_Serial1
2000b4d8 l     O .bss	00000040 rx_buffer1
2000b558 l     O .bss	00000040 tx_buffer1
20000fd8 l     O .data	00000064 UART6_Hardware
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00029dac l     F .text.itcm	00000078 _GLOBAL__sub_I_IRQHandler_Serial3
2000b518 l     O .bss	00000040 rx_buffer3
2000b598 l     O .bss	00000028 tx_buffer3
20004c78 l     O .data	00000064 UART2_Hardware
00000000 l    df *ABS*	00000000 BMC.cpp
000027a8 l     F .text.itcm	00000050 BMCDisplay::selectMux(unsigned char) [clone .isra.0]
60001c5c l     O .text.progmem	00000010 BMCGFXFont48pt7b
60001fb4 l     O .text.progmem	0000521a BMCGFXFont48pt7bBitmaps
60001cbc l     O .text.progmem	000002f8 BMCGFXFont48pt7bGlyphs
60001c6c l     O .text.progmem	00000010 BMCGFXFont40pt7b
600074c8 l     O .text.progmem	000037d6 BMCGFXFont40pt7bBitmaps
600071d0 l     O .text.progmem	000002f8 BMCGFXFont40pt7bGlyphs
60001c7c l     O .text.progmem	00000010 BMCGFXFont32pt7b
6000af98 l     O .text.progmem	0000248b BMCGFXFont32pt7bBitmaps
6000aca0 l     O .text.progmem	000002f8 BMCGFXFont32pt7bGlyphs
60001c8c l     O .text.progmem	00000010 BMCGFXFont24pt7b
6000d71c l     O .text.progmem	000014d4 BMCGFXFont24pt7bBitmaps
6000d424 l     O .text.progmem	000002f8 BMCGFXFont24pt7bGlyphs
60001c9c l     O .text.progmem	00000010 BMCGFXFont16pt7b
6000eee8 l     O .text.progmem	00000945 BMCGFXFont16pt7bBitmaps
6000ebf0 l     O .text.progmem	000002f8 BMCGFXFont16pt7bGlyphs
60001cac l     O .text.progmem	00000010 BMCGFXFont10pt7b
6000fb28 l     O .text.progmem	0000039b BMCGFXFont10pt7bBitmaps
6000f830 l     O .text.progmem	000002f8 BMCGFXFont10pt7bGlyphs
20000f18 l     O .data	00000003 CSWTCH.368
00000000 l    df *ABS*	00000000 BMC.events.cpp
00006d84 l     F .text.itcm	00000014 BMCStopwatch::getState() [clone .part.0]
00006d98 l     F .text.itcm	0000002a BMCFas::getBlockChannel(unsigned short) [clone .part.0]
00006dc4 l     F .text.itcm	00000058 BMCFas::setPresetNumber(unsigned short) [clone .part.0]
00006e1c l     F .text.itcm	00000152 bool BMCDisplayHandlerFas::renderTriangle<BMC_SSD1306>(BMC_SSD1306&, BMCDataContainer, BMCDiplayHandlerData, bool) [clone .isra.0]
00006f70 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00006f90 l     F .text.itcm	0000028c bool BMCDisplayHandlerMain::renderSlider<BMC_SSD1306>(BMC_SSD1306&, unsigned short&, unsigned short&, BMCDataContainer, BMCDiplayHandlerData, bool) [clone .isra.0]
00007220 l     F .text.itcm	000003e4 bool BMCDisplayHandlerFas::renderTuner<BMC_SSD1306>(BMC_SSD1306&, BMCTunerData&, BMCDiplayHandlerData, bool) [clone .isra.0]
000090b0 l     F .text.itcm	0000004a BMCFas::toggleBlockChannel(unsigned short, unsigned char, unsigned char) [clone .part.0]
0000a2c4 l     F .text.itcm	00000050 BMCDisplay::selectMux(unsigned char) [clone .isra.0]
0000a650 l     F .text.itcm	0000015e BMC_OLED::renderLine(char const*, unsigned char, unsigned char, unsigned char, unsigned char, bool) [clone .isra.0]
0000a7b0 l     F .text.itcm	000001d0 BMC_OLED::print(BMCDataContainer, char*) [clone .isra.0]
6000fec4 l     O .text.progmem	00000010 BMCGFXFont48pt7b
6001021c l     O .text.progmem	0000521a BMCGFXFont48pt7bBitmaps
6000ff24 l     O .text.progmem	000002f8 BMCGFXFont48pt7bGlyphs
6000fed4 l     O .text.progmem	00000010 BMCGFXFont40pt7b
60015730 l     O .text.progmem	000037d6 BMCGFXFont40pt7bBitmaps
60015438 l     O .text.progmem	000002f8 BMCGFXFont40pt7bGlyphs
6000fee4 l     O .text.progmem	00000010 BMCGFXFont32pt7b
60019200 l     O .text.progmem	0000248b BMCGFXFont32pt7bBitmaps
60018f08 l     O .text.progmem	000002f8 BMCGFXFont32pt7bGlyphs
6000fef4 l     O .text.progmem	00000010 BMCGFXFont24pt7b
6001b984 l     O .text.progmem	000014d4 BMCGFXFont24pt7bBitmaps
6001b68c l     O .text.progmem	000002f8 BMCGFXFont24pt7bGlyphs
6000ff04 l     O .text.progmem	00000010 BMCGFXFont16pt7b
6001d150 l     O .text.progmem	00000945 BMCGFXFont16pt7bBitmaps
6001ce58 l     O .text.progmem	000002f8 BMCGFXFont16pt7bGlyphs
6000ff14 l     O .text.progmem	00000010 BMCGFXFont10pt7b
6001dd90 l     O .text.progmem	0000039b BMCGFXFont10pt7bBitmaps
6001da98 l     O .text.progmem	000002f8 BMCGFXFont10pt7bGlyphs
20000f1c l     O .data	00000028 CSWTCH.677
20000fac l     O .data	00000003 CSWTCH.853
00000000 l    df *ABS*	00000000 BMC-SSD1306.cpp
000186bc l     F .text.itcm	00000088 BMC_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]
00018744 l     F .text.itcm	00000160 BMC_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]
6001e12c l     O .text.progmem	00000008 BMC_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::premask
6001e134 l     O .text.progmem	00000008 BMC_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::postmask
6001e13c l     O .text.progmem	00000005 BMC_SSD1306::display()::dlist1
6001e144 l     O .text.progmem	00000003 BMC_SSD1306::startscrollleft(unsigned char, unsigned char)::scrollList2b
6001e148 l     O .text.progmem	00000003 BMC_SSD1306::startscrollright(unsigned char, unsigned char)::scrollList1b
6001e14c l     O .text.progmem	00000004 BMC_SSD1306::begin(unsigned char, unsigned char)::init1
6001e150 l     O .text.progmem	00000004 BMC_SSD1306::begin(unsigned char, unsigned char)::init2
6001e154 l     O .text.progmem	00000004 BMC_SSD1306::begin(unsigned char, unsigned char)::init3
6001e158 l     O .text.progmem	00000004 BMC_SSD1306::begin(unsigned char, unsigned char)::init4a
6001e15c l     O .text.progmem	00000003 BMC_SSD1306::begin(unsigned char, unsigned char)::init4b
6001e160 l     O .text.progmem	00000003 BMC_SSD1306::begin(unsigned char, unsigned char)::init4c
6001e164 l     O .text.progmem	00000006 BMC_SSD1306::begin(unsigned char, unsigned char)::init5
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 serialEvent1.cpp
00000000 l    df *ABS*	00000000 serialEvent3.cpp
00000000 l    df *ABS*	00000000 usb_desc.c
20005274 l     O .data	00000012 device_descriptor
20005288 l     O .data	00000021 seremu_report_desc
6001e380 l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 BMC.debug.cpp
00003670 l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00003684 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
000036a4 l     F .text.itcm	00000024 Print::println(char const*) [clone .isra.0]
000036c8 l     F .text.itcm	00000070 BMC::printDebugHeader(char*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 BMC.editor.cpp
20000eb0 l     O .data	00000028 CSWTCH.104
20000ed8 l     O .data	00000040 CSWTCH.106
00000000 l    df *ABS*	00000000 BMC.hardware.auxJacks.cpp
00000000 l    df *ABS*	00000000 BMC.hardware.buttons.cpp
00000000 l    df *ABS*	00000000 BMC.hardware.cpp
20000e70 l     O .data	00000040 CSWTCH.100
20000fb0 l     O .data	00000028 CSWTCH.98
00000000 l    df *ABS*	00000000 BMC.hardware.leds.cpp
00000000 l    df *ABS*	00000000 BMC.hardware.pixels.cpp
00014504 l     F .text.itcm	00000004 BMCPixels::getDefaultColor(unsigned short) [clone .isra.0]
20000f44 l     O .data	00000028 CSWTCH.71
20000f6c l     O .data	00000040 CSWTCH.73
00000000 l    df *ABS*	00000000 BMC.layers.cpp
00014f1c l     F .text.itcm	000002f0 BMC::setLayer(unsigned char, bool, bool) [clone .part.0]
00000000 l    df *ABS*	00000000 BMC.midi.cpp
00015308 l     F .text.itcm	00000078 BMCDawLogicControl::incomingSysEx(BMCMidiMessage) [clone .part.0]
00000000 l    df *ABS*	00000000 BMC.sketchBytes.cpp
00000000 l    df *ABS*	00000000 BMC.sketchStream.cpp
00000000 l    df *ABS*	00000000 BMC.tempoToTap.cpp
00000000 l    df *ABS*	00000000 BMC.timedEvents.cpp
00000000 l    df *ABS*	00000000 BMC.triggers.cpp
00000000 l    df *ABS*	00000000 BMC-ILI9341.cpp
00000000 l    df *ABS*	00000000 BMC-Editor.backup.cpp
00000000 l    df *ABS*	00000000 BMC-Editor.cpp
00019978 l     F .text.itcm	00000428 BMCEditor::storeErase(bool) [clone .isra.0]
00000000 l    df *ABS*	00000000 BMC-Editor.midi.cpp
00000000 l    df *ABS*	00000000 BMC-Editor.midi.global.cpp
0001ad48 l     F .text.itcm	00000028 BMCMidiMessage::appendSysExByte(unsigned char, bool) [clone .isra.0]
0001ad70 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
0001ad90 l     F .text.itcm	00000024 Print::println(char const*) [clone .isra.0]
0001b004 l     F .text.itcm	00000046 BMCEditor::globalSetTime(bool) [clone .part.0]
0001b04c l     F .text.itcm	00000182 BMCEditor::globalEditorMessenger(bool) [clone .part.0]
0001b1d0 l     F .text.itcm	000000b0 BMCEditor::globalEditorFeedback(bool) [clone .part.0]
0001b2fc l     F .text.itcm	00000192 void BMCEditor::deviceResponseData<(unsigned char)1, (unsigned char)16, unsigned char>(bmcStoreDevice<(unsigned char)1, (unsigned char)16, unsigned char>&, BMCMidiMessage&, unsigned short, unsigned char) [clone .isra.0]
0001b490 l     F .text.itcm	00000192 void BMCEditor::deviceResponseData<(unsigned char)1, (unsigned char)8, unsigned char>(bmcStoreDevice<(unsigned char)1, (unsigned char)8, unsigned char>&, BMCMidiMessage&, unsigned short, unsigned char) [clone .isra.0]
0001b624 l     F .text.itcm	00000170 void BMCEditor::deviceResponseData<(unsigned char)1, (unsigned char)1, unsigned char>(bmcStoreDevice<(unsigned char)1, (unsigned char)1, unsigned char>&, BMCMidiMessage&, unsigned short, unsigned char) [clone .isra.0]
0001b794 l     F .text.itcm	000001b8 void BMCEditor::deviceResponseData<(unsigned char)6, (unsigned char)6, unsigned char>(bmcStoreDevice<(unsigned char)6, (unsigned char)6, unsigned char>&, BMCMidiMessage&, unsigned short, unsigned char) [clone .isra.0]
0001b94c l     F .text.itcm	00000182 void BMCEditor::deviceResponseData<(unsigned char)0, (unsigned char)6, unsigned char>(bmcStoreDevice<(unsigned char)0, (unsigned char)6, unsigned char>&, BMCMidiMessage&, unsigned short, unsigned char) [clone .isra.0]
0001bb44 l     F .text.itcm	00000426 BMCEditor::globalBuildInfoMessage() [clone .part.0]
0001bf6c l     F .text.itcm	000000a8 BMCEditor::globalEditorMetrics() [clone .part.0]
0001c10c l     F .text.itcm	00000180 BMCEditor::saveSetListSong(unsigned short) [clone .part.0]
0001c28c l     F .text.itcm	00000180 BMCEditor::saveSetList(unsigned char) [clone .part.0]
0001c40c l     F .text.itcm	00000180 BMCEditor::saveGlobalButton(unsigned char) [clone .part.0]
0001c58c l     F .text.itcm	00000170 BMCEditor::saveTempoToTap(unsigned char) [clone .part.0]
0001c6fc l     F .text.itcm	0000017c BMCEditor::savePotCalibration(unsigned short) [clone .part.0]
0001c878 l     F .text.itcm	0000017c BMCEditor::saveAuxJack(unsigned char) [clone .part.0]
0001c9f4 l     F .text.itcm	0000016c BMCEditor::saveTrigger(unsigned char) [clone .part.0]
0001cb60 l     F .text.itcm	0000016c BMCEditor::saveTimedEvent(unsigned char) [clone .part.0]
0001cccc l     F .text.itcm	00000180 BMCEditor::savePreset(unsigned short) [clone .part.0]
0001ce4c l     F .text.itcm	00000180 BMCEditor::saveCustomSysEx(unsigned char) [clone .part.0]
0001cfcc l     F .text.itcm	00000170 BMCEditor::saveGlobalLed(unsigned char) [clone .part.0]
0001d8e0 l     F .text.itcm	0000015a void BMCEditor::incomingMessageDeviceWrite<(unsigned char)1, (unsigned char)8, unsigned char>(bmcStoreDevice<(unsigned char)1, (unsigned char)8, unsigned char>&, unsigned short, short) [clone .isra.0]
0001da3c l     F .text.itcm	00000174 void BMCEditor::incomingMessageDeviceWrite<(unsigned char)1, (unsigned char)16, unsigned char>(bmcStoreDevice<(unsigned char)1, (unsigned char)16, unsigned char>&, unsigned short, short) [clone .isra.0]
0001dbb0 l     F .text.itcm	00000164 void BMCEditor::incomingMessageDeviceWrite<(unsigned char)1, (unsigned char)1, unsigned char>(bmcStoreDevice<(unsigned char)1, (unsigned char)1, unsigned char>&, unsigned short, short) [clone .isra.0]
0001dd14 l     F .text.itcm	00000176 void BMCEditor::incomingMessageDeviceWrite<(unsigned char)6, (unsigned char)6, unsigned char>(bmcStoreDevice<(unsigned char)6, (unsigned char)6, unsigned char>&, unsigned short, short) [clone .isra.0]
0001de8c l     F .text.itcm	00000114 void BMCEditor::incomingMessageDeviceWrite<(unsigned char)0, (unsigned char)6, unsigned char>(bmcStoreDevice<(unsigned char)0, (unsigned char)6, unsigned char>&, unsigned short, short) [clone .isra.0]
0001dfa0 l     F .text.itcm	0000033c BMCEditor::storeErase(bool) [clone .isra.0]
0001e39c l     F .text.itcm	000000c8 BMCEditor::globalEditorErase(bool) [clone .part.0]
00000000 l    df *ABS*	00000000 BMC-Editor.midi.layers.cpp
0002216c l     F .text.itcm	000001c8 BMCEditor::layerMessageLayerCopySwap(bool) [clone .part.0]
00000000 l    df *ABS*	00000000 BMC-Editor.midi.utility.cpp
00000000 l    df *ABS*	00000000 BMC-Midi.cpp
00022cdc l     F .text.itcm	000002a8 BMCMidi::sendSysEx(unsigned char, unsigned char*, unsigned short, bool, unsigned char, bool) [clone .part.0]
00022f84 l     F .text.itcm	00000200 BMCMidi::sendRealTime(unsigned char, unsigned char, unsigned char) [clone .part.0]
0002341c l     F .text.itcm	00000082 BMCMidi::scrollPC(unsigned char, unsigned char, unsigned char, bool, bool, unsigned char, unsigned char) [clone .part.0]
00023788 l     F .text.itcm	00000090 BMCMidi::scrollCC(unsigned char, unsigned char, unsigned char, unsigned char, bool, bool, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 BMC-24LC256.cpp
00000000 l    df *ABS*	00000000 Adafruit_GFX.cpp
2000103c l     O .data	00000500 font
00000000 l    df *ABS*	00000000 MassStorageDriver.cpp
00000000 l    df *ABS*	00000000 ehci.cpp
2000bc9a l     O .bss	00000001 port_state
2000b5c0 l     O .bss	00000004 active_timers
20006000 l     O .bss	00000080 periodictable
2000b5f4 l     O .bss	00000100 uframe_bandwidth
2000b6fc l     O .bss	00000004 async_followup_last
2000b700 l     O .bss	00000004 async_followup_first
2000b704 l     O .bss	00000004 periodic_followup_last
2000b708 l     O .bss	00000004 periodic_followup_first
2000b710 l     O .bss	00000004 rootdev
00000000 l    df *ABS*	00000000 enumeration.cpp
2000b6f4 l     O .bss	00000004 available_drivers
2000b70c l     O .bss	00000004 devlist
2000a740 l     O .bss	00000800 enumbuf
2000bc8c l     O .bss	00000002 enumlen
2000af40 l     O .bss	00000008 enumsetup
2000bca0 l     O .bss	00000001 USBHost::assign_address()::last_assigned_address
00000000 l    df *ABS*	00000000 memory.cpp
20006080 l     O .bss	00000060 memory_Pipe
2000b5c4 l     O .bss	00000024 memory_Device
2000b5e8 l     O .bss	00000004 free_Pipe_list
200060e0 l     O .bss	00000100 memory_Transfer
2000b5ec l     O .bss	00000004 free_Device_list
2000b5f0 l     O .bss	00000004 free_strbuf_list
2000b6f8 l     O .bss	00000004 free_Transfer_list
00000000 l    df *ABS*	00000000 midi.cpp
00000000 l    df *ABS*	00000000 WS2812Serial.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00029e2c l     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 WString.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 eeprom.c
2000bca2 l     O .bss	00000001 initialized
2000bae4 l     O .bss	0000001e sector_index
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.S.o
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 usb_midi.c
0002b7f4 l     F .text.itcm	00000040 sysex_byte
0002b834 l     F .text.itcm	00000060 rx_queue_transfer
0002b894 l     F .text.itcm	00000064 rx_event
0002b8f8 l     F .text.itcm	0000013c usb_midi_write_packed.part.0
2000ba8c l     O .bss	00000004 rx_available
2000ba94 l     O .bss	0000000c rx_count
2000bca3 l     O .bss	00000001 rx_head
2000baa0 l     O .bss	0000000c rx_index
2000babc l     O .bss	00000007 rx_list
2000bc90 l     O .bss	00000002 rx_packet_size
2000bca5 l     O .bss	00000001 rx_tail
2000a380 l     O .bss	000000c0 rx_transfer
2000bca8 l     O .bss	00000001 transmit_previous_timeout
2000bc92 l     O .bss	00000002 tx_available
2000bcaa l     O .bss	00000001 tx_head
2000bcac l     O .bss	00000001 tx_noautoflush
2000bc96 l     O .bss	00000002 tx_packet_size
2000a540 l     O .bss	00000080 tx_transfer
20200080 l     O .bss.dma	00000c00 rx_buffer
20200c80 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 usb_seremu.c
0002c1f8 l     F .text.itcm	0000004c rx_queue_transfer
0002c244 l     F .text.itcm	00000058 rx_event
0002c480 l     F .text.itcm	00000048 usb_seremu_flush_callback
0002c4c8 l     F .text.itcm	0000013c usb_seremu_write.part.0
2000ba90 l     O .bss	00000004 rx_available
2000bca4 l     O .bss	00000001 rx_head
2000baac l     O .bss	00000010 rx_index
2000bac4 l     O .bss	00000009 rx_list
2000bca6 l     O .bss	00000001 rx_tail
2000a440 l     O .bss	00000100 rx_transfer
2000bca9 l     O .bss	00000001 transmit_previous_timeout
2000bc94 l     O .bss	00000002 tx_available
2000bcab l     O .bss	00000001 tx_head
2000bcad l     O .bss	00000001 tx_noautoflush
2000a5c0 l     O .bss	00000180 tx_transfer
20201480 l     O .bss.dma	00000100 rx_buffer
20201580 l     O .bss.dma	00000300 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
2000bc9e l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 libm_a-w_fmod.o
00000000 l    df *ABS*	00000000 libm_a-s_cos.o
00000000 l    df *ABS*	00000000 libm_a-e_fmod.o
00000000 l    df *ABS*	00000000 libm_a-e_rem_pio2.o
00000000 l    df *ABS*	00000000 libm_a-k_rem_pio2.o
00000000 l    df *ABS*	00000000 libm_a-k_cos.o
00000000 l    df *ABS*	00000000 libm_a-k_sin.o
00000000 l    df *ABS*	00000000 libm_a-s_fabs.o
00000000 l    df *ABS*	00000000 libm_a-s_scalbn.o
00000000 l    df *ABS*	00000000 libm_a-s_floor.o
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-realloc.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0002e2b4 l     F .text.itcm	00000018 stdio_exit_handler
0002e2cc l     F .text.itcm	00000040 cleanup_stdio
0002e30c l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strcat.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-stpcpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-strcmp.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
000317d0 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
0003270c l     F .text.itcm	00000076 __sprint_r.part.0
00033710 l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 usb_product_name.c
00033f68 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00033f70 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
00033f78 l     F .text.itcm	00000008 ___init_veneer
60001c00 l     F .text.code	00000008 __main_veneer
60001c08 l     F .text.code	00000008 __set_arm_clock_veneer
60001c10 l     F .text.code	00000008 __pwm_init_veneer
60001c18 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001c20 l     F .text.code	00000008 __delay_veneer
60001c28 l     F .text.code	00000008 ____libc_init_array_veneer
60001c30 l     F .text.code	00000008 __memset_veneer
0001adb4  w    F .text.itcm	000001cc BMCBuildData::getUIData(unsigned char, short)
0002e6bc g     F .text.itcm	00000046 stpcpy
000282c0 g     F .text.itcm	00000010 USBHost::free_string_buffer(strbuf_t*)
0001a8c0 g     F .text.itcm	00000010 BMCEditor::getGlobalOffset()
00005d70 g     F .text.itcm	00000188 BMC::printButtonTrigger(unsigned char, unsigned char, unsigned char)
000281f4 g     F .text.itcm	00000050 USBHost::init_Device_Pipe_Transfer_memory()
00033f44 g     F .text.itcm	00000024 _isatty_r
0002ea5c g     F .text.itcm	000000ba strcpy
0002c3f8 g     F .text.itcm	00000024 usb_seremu_available
000269d4 g     F .text.itcm	000000b0 Adafruit_GFX::getTextBounds(char const*, short, short, short*, short*, unsigned short*, unsigned short*)
000066b0 g     F .text.itcm	00000564 BMC::ctrlHardware()
60001828 g     F .text.code	00000002 startup_default_late_hook
0002d630 g     F .text.itcm	00000012 fabs
0003165c g     F .text.itcm	0000002c _lseek_r
0001b280  w    F .text.itcm	00000032 BMCMidiMessage::appendToSysEx14Bits(unsigned short)
0002c6a4  w    F .text.itcm	000000f0 yield
00014444 g     F .text.itcm	000000c0 BMC::readLeds()
2000bc88 g     O .bss	00000004 usb_timer1_callback
000258dc g     F .text.itcm	0000001e Adafruit_GFX::fillScreen(unsigned short)
2000ba54 g     O .bss	00000004 em_rx_tx2
6001e27c g     O .text.progmem	00000018 usb_string_manufacturer_name_default
000258b0 g     F .text.itcm	00000012 Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)
00007f84  w    F .text.itcm	000000c4 BMCSetLists::scrollSet(bool, bool, unsigned char, unsigned char, unsigned char)
2000bb30 g     O .bss	00000004 usb_midi_handleProgramChange
2000b258 g     O .bss	00000140 Wire1
0002b7d8  w    F .text.itcm	00000004 usb_seremu_class::peek()
00019788  w    F .text.itcm	000001ec BMCEditor::saveSettings()
6001e25c  w    O .text.progmem	00000001 _serialEventUSB2_default
000234a0 g     F .text.itcm	000002e8 BMCMidi::sendControlChange(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)
2000b8d4 g     O .bss	00000001 __lock___atexit_recursive_mutex
000316b4 g     F .text.itcm	0000004c _wcrtomb_r
00027d9c g     F .text.itcm	00000110 USBHost::claim_drivers(Device_struct*)
60001650 g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
00029f60 g     F .text.itcm	0000001c Print::println()
000256fc g     F .text.itcm	000000ac TwoWire::isr()
000315ec g     F .text.itcm	00000020 __sseek
0002e3e0 g     F .text.itcm	0000003c __sinit
00033e68 g     F .text.itcm	000000b0 __swbuf_r
000272c0 g     F .text.itcm	0000015c USBHost::followup_Error()
00028ec8 g     F .text.itcm	000001ac WS2812Serial::begin()
0002de78 g     F .text.itcm	0000000c __malloc_unlock
2000bb14 g     O .bss	00000004 usb_midi_handleAfterTouch
000000c8  w    F .text.itcm	00000002 USBDriver::control(Transfer_struct const*)
00015610  w    F .text.itcm	0000010e BMCMidi::routing(BMCMidiMessage&)
2000bc9d g     O .bss	00000001 USBHost::enumeration_busy
000026fc g     F .text.itcm	000000ac BMC::stopwatchCmd(unsigned char, unsigned char, unsigned char, unsigned char)
00028334 g     F .text.itcm	00000030 USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)
00026820 g     F .text.itcm	000001b2 Adafruit_GFX::charBounds(unsigned char, short*, short*, short*, short*, short*, short*)
600017cc g     F .text.code	00000054 analog_init
0002a798 g     F .text.itcm	00000048 eeprom_initialize
00001a50  w    F .text.itcm	0000010c BMC::runLayerChanged()
20004c64 g     O .data	00000004 F_CPU_ACTUAL
2000bb48 g     O .bss	00000004 usb_midi_handleSysExComplete
000226d0 g     F .text.itcm	00000034 BMCEditor::layerProcessMessage()
00019238 g     F .text.itcm	00000114 BMCEditor::backupEventMessage(unsigned short)
0002e47c g     F .text.itcm	000000f8 memmove
0001d164  w    F .text.itcm	00000170 BMCEditor::saveDevicePorts(unsigned char)
00029704 g     F .text.itcm	00000072 HardwareSerial::peek()
00028284 g     F .text.itcm	00000010 USBHost::allocate_Transfer()
00030bc4 g     F .text.itcm	0000004c _Balloc
00033f8c g       .ARM.exidx	00000000 __exidx_end
2000bcb4 g     O .bss	00000001 usb_midi_msg_type
00013fe8 g     F .text.itcm	00000132 BMC::assignLeds()
2000bc9b g     O .bss	00000001 EventResponder::runningFromYield
00015720  w    F .text.itcm	000002ac BMCMidiClock::read(bool, bool)
0000b088  w    F .text.itcm	000002a4 BMCDisplay::renderFasLooper(BMCDataContainer)
200048ac g     O .data	000000a0 pwm_pin_info
00009938  w    F .text.itcm	0000018a BMCBeatBuddy::tempo(unsigned short)
0002ae68 g     F .text.itcm	00000060 tempmonGetTemp
00027c20 g     F .text.itcm	00000038 USBHost::Task()
00029eac g     F .text.itcm	00000050 Print::write(unsigned char const*, unsigned int)
00028694 g     F .text.itcm	0000000c MIDIDeviceBase::rx_callback(Transfer_struct const*)
20004cdc g     O .data	00000004 __atexit_recursive_mutex
000152c4 g     F .text.itcm	00000020 BMC::prevLayer()
0002e76c g     F .text.itcm	0000000c __errno
60001000 g     O .text.headers	00000020 ImageVectorTable
0001eee4 g     F .text.itcm	00001f6e BMCEditor::incomingMessageDevice(bool)
0002b7dc  w    F .text.itcm	00000004 usb_seremu_class::read()
00026c54  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
2000b71c g     O .bss	00000004 EventResponder::firstInterrupt
0002b77c g     F .text.itcm	00000004 usb_transfer_status
00027d1c g     F .text.itcm	0000007e USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)
00018a18 g     F .text.itcm	00000078 BMC_SSD1306::dim(bool)
2000ba4c g     O .bss	00000004 __stdio_exit_handler
00025160 g     F .text.itcm	000000d8 BMC24LC256::read(unsigned long, unsigned char*, unsigned int)
00025be0 g     F .text.itcm	00000118 Adafruit_GFX::writeLine(short, short, short, short, unsigned short)
2000b058 g     O .bss	00000060 Serial1
200052d6 g     O .data	00000001 analog_write_res
0002a124 g     F .text.itcm	0000003a String::String(String const&)
00018990 g     F .text.itcm	00000018 BMC_SSD1306::BMC_SSD1306(unsigned char, unsigned char)
0002c64c g     F .text.itcm	00000058 usb_seremu_flush_output
00017528  w    F .text.itcm	000001e2 BMCSerialMIDI<(unsigned char)6, HardwareSerial>::_read()
0002c604 g     F .text.itcm	0000002c usb_seremu_putchar
00033f18 g     F .text.itcm	0000002c _fstat_r
20004574 g     O .data	00000280 digital_pin_to_info_PGM
0002c890 g     F .text.itcm	00000298 __ieee754_fmod
000018b4  w    F .text.itcm	0000019c BMCSync::BMCSync(BMCMidi&, BMCMidiClock&, BMCCallbacks&)
2000ba68 g     O .bss	00000004 errno
0002d758 g     F .text.itcm	00000110 floor
6001e1bc g     O .text.progmem	00000050 TwoWire::i2c3_hardware
00033f88 g       .text.itcm	00000000 _etext
00026b78 g     F .text.itcm	000000dc _spi_dma_rxISR0()
200056c0 g       .bss	00000000 _sbss
0002741c g     F .text.itcm	000001e0 USBHost::isr()
00012cb4  w    F .text.itcm	0000012c BMCButtonsDualHandler::read(unsigned char, unsigned char, bool)
000259d4 g     F .text.itcm	000000a4 Adafruit_GFX::drawLine(short, short, short, short, unsigned short)
000082b4  w    F .text.itcm	000000d0 BMCSetLists::getPartName(unsigned char, char*)
2000bb5c g     O .bss	00000004 usb_midi_handleVelocityChange
00027c78 g     F .text.itcm	000000a4 USBHost::new_Device(unsigned long, unsigned long, unsigned long)
000296dc g     F .text.itcm	00000026 HardwareSerial::available()
00011ca4 g     F .text.itcm	000001f4 BMC::assignAuxJacks()
0002c648 g     F .text.itcm	00000004 usb_seremu_write_buffer_free
0002a704 g     F .text.itcm	00000024 digitalRead
00009b0c  w    F .text.itcm	000001ba BMCCustomSysEx::send(unsigned char, unsigned char, unsigned char, unsigned char)
6001e38c g       *ABS*	00000000 _stextload
000188a4 g     F .text.itcm	00000076 BMC_SSD1306::drawFastHLine(short, short, short, unsigned short)
00000098 g     F .text.itcm	0000000c loop
0002ab0c g     F .text.itcm	0000007a flexpwm_init
0002a98c g     F .text.itcm	000000b4 flexpwmWrite
0002bb08 g     F .text.itcm	000000a0 usb_midi_flush_output
6000182c g     F .text.code	00000004 startup_debug_reset
0001d2d4  w    F .text.itcm	00000184 BMCEditor::saveShortCuts(unsigned char)
00024f34 g     F .text.itcm	00000026 BMCMidi::scrollPC(unsigned char, unsigned char, unsigned char, bool, bool, unsigned char, unsigned char)
0002b640 g     F .text.itcm	00000064 usb_config_rx
0002ac7c  w    F .text.itcm	00000002 serialEvent1()
00015cc4 g     F .text.itcm	00001550 BMC::incomingMidi(BMCMidiMessage)
000000cc  w    F .text.itcm	00000002 USBDriver::Task()
0002b7ec  w    F .text.itcm	00000008 usb_seremu_class::write(unsigned char const*, unsigned int)
0002be20 g     F .text.itcm	000003d8 usb_midi_read
00027eac g     F .text.itcm	000002a0 USBHost::enumeration(Transfer_struct const*)
0001a93c g     F .text.itcm	00000010 BMCEditor::getGlobalButtonOffset(unsigned short)
00029bb8 g     F .text.itcm	00000004 HardwareSerial::write(unsigned char)
2000bb50 g     O .bss	00000004 usb_midi_handleSystemReset
00025cf8 g     F .text.itcm	00000030 Adafruit_GFX::Adafruit_GFX(short, short)
000254c0 g     F .text.itcm	000000fc TwoWire::endTransmission(unsigned char)
0002cb28 g     F .text.itcm	00000294 __ieee754_rem_pio2
00021a7c g     F .text.itcm	00000212 BMCEditor::globalSketchBytesData()
2000b718 g     O .bss	00000004 EventResponder::lastInterrupt
2000bc98 g     O .bss	00000002 usb_midi_msg_sysex_len
0002a7f0 g     F .text.itcm	00000134 memcpy
0001a884 g     F .text.itcm	00000016 BMCEditor::connectionHasChanged()
000080c8  w    F .text.itcm	00000080 BMCSetLists::scrollPart(bool, bool, unsigned char, unsigned char, unsigned char)
2000bb34 g     O .bss	00000004 usb_midi_handleRealTimeSystem
00017f20 g     F .text.itcm	000000fc BMC::streamToSketch(unsigned char, int, char*)
200056c0 g     O .data	00000000 .hidden __TMC_END__
0002f080 g     F .text.itcm	00001b44 _svfprintf_r
00014a30 g     F .text.itcm	00000010 BMC::setupPixels()
2000bb08 g     O .bss	00000004 systick_millis_count
000231b4 g     F .text.itcm	00000268 BMCMidi::sendProgramChange(unsigned char, unsigned char, unsigned char, unsigned char)
00025480 g     F .text.itcm	00000040 TwoWire::wait_idle()
2000bcae g     O .bss	00000001 usb_configuration
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
000159cc  w    F .text.itcm	00000144 BMCDawLogicControl::incomingSysEx(BMCMidiMessage)
0002aa40 g     F .text.itcm	000000cc analogWrite
0001c088  w    F .text.itcm	00000084 BMCStorage::debugStopTiming()
6001e27c  w    O .text.progmem	00000018 usb_string_manufacturer_name
0001a9a0 g     F .text.itcm	0000000c BMCEditor::getTimedEventOffset(unsigned short)
00014508  w    F .text.itcm	0000028c BMCPixels::begin()
00011e98 g     F .text.itcm	00000044 BMC::setupAuxJacks()
0002d8ec g     F .text.itcm	00000010 malloc
6001e16c g     O .text.progmem	00000050 TwoWire::i2c1_hardware
000189b8 g     F .text.itcm	0000001e BMC_SSD1306::clearDisplay()
0002ae44  w    F .text.itcm	0000000a _fstat
00025268  w    F .text.itcm	0000001e TwoWire::read()
00028388 g     F .text.itcm	00000008 MIDIDeviceBase::disconnect()
00031790 g     F .text.itcm	00000040 __assert_func
00026a84  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
0001a978 g     F .text.itcm	0000000e BMCEditor::getCustomSysExOffset(unsigned short)
00023ac4 g     F .text.itcm	000002ac BMCMidi::sendNoteOff(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
200002f8 g     O .data	000000c8 __mprec_tens
60001ab4 g     F .text.code	000000e8 usb_init
00018990 g     F .text.itcm	00000018 BMC_SSD1306::BMC_SSD1306(unsigned char, unsigned char)
2000bc9f  w    O .bss	00000001 BMCSerialMonitor::read(char*)::i
0002d450 g     F .text.itcm	00000130 __kernel_cos
000258fc g     F .text.itcm	00000002 Adafruit_GFX::invertDisplay(bool)
00018bcc g     F .text.itcm	000004f8 BMC_SSD1306::begin(unsigned char, unsigned char)
2000b910 g     O .bss	00000004 __malloc_top_pad
2000afa0 g     O .bss	00000050 SPI1
2000bb0c g     O .bss	00000004 systick_safe_read
00025378 g     F .text.itcm	00000108 TwoWire::force_clock()
00008148  w    F .text.itcm	000000b0 BMCSetLists::getSetName(unsigned char, char*)
0001a904 g     F .text.itcm	0000000a BMCEditor::getSketchBytesOffset(unsigned short)
aaaabfff g       *ABS*	00000000 _flexram_bank_config
20004ce4 g     O .data	00000000 .hidden __dso_handle
00017344  w    F .text.itcm	000001e2 BMCSerialMIDI<(unsigned char)1, HardwareSerial>::_read()
0000ae50  w    F .text.itcm	00000238 BMCDisplay::renderFasTuner(BMCDataContainer)
00031630 g     F .text.itcm	00000008 _localeconv_r
00033790 g     F .text.itcm	000002f4 __sfvwrite_r
00030d68 g     F .text.itcm	0000005c __i2b
000095f0  w    F .text.itcm	00000348 BMCBeatBuddy::sendCommand(unsigned char, unsigned char)
20000000 g       .data	00000000 _sdata
000213b4 g     F .text.itcm	00000038 BMCEditor::globalBuildInfoMessage()
2000bb28 g     O .bss	00000004 usb_midi_handleNoteOn
00029e24  w    F .text.itcm	00000006 usb_seremu_class::write(unsigned char)
6001e30c g     O .text.progmem	00000073 usb_config_descriptor_480
0002e71c g     F .text.itcm	00000024 _sbrk_r
00012fc8  w    F .text.itcm	0000006c void BMC::handleButton<(unsigned char)6, (unsigned char)6>(bmcStoreDevice<(unsigned char)6, (unsigned char)6, unsigned char>&, unsigned char, unsigned short, unsigned char)
60001820 g     F .text.code	00000002 startup_default_early_hook
60001620 g     F .text.code	00000030 ResetHandler
200041b0 g     O .data	00000058 vtable for BMC_SSD1306
000282d0 g     F .text.itcm	00000030 USBHost::contribute_Pipes(Pipe_struct*, unsigned long)
0001d5d4  w    F .text.itcm	0000016c BMCEditor::saveSketchBytes()
0002a6b0 g     F .text.itcm	00000054 digitalWrite
2000b720 g     O .bss	00000004 EventResponder::lastYield
00025238 g     F .text.itcm	00000022 BMC24LC256::read(unsigned long)
00031688 g     F .text.itcm	0000002c _read_r
0002ba34 g     F .text.itcm	000000c4 usb_midi_configure
0003133c g     F .text.itcm	000000c6 _fclose_r
000210f0 g     F .text.itcm	00000130 BMCEditor::disconnect(bool)
00021cd8 g     F .text.itcm	00000038 BMCEditor::globalEditorMetrics()
2000b908 g     O .bss	00000004 __malloc_max_sbrked_mem
0001abac g     F .text.itcm	0000019c BMCEditor::read()
00021220 g     F .text.itcm	000000e0 BMCEditor::disconnectEditor()
0002a728 g     F .text.itcm	00000070 pinMode
0002a200 g     F .text.itcm	00000036 String::getBytes(unsigned char*, unsigned int, unsigned int) const
00029fc0 g     F .text.itcm	00000164 Print::printFloat(double, unsigned char)
0002d580 g     F .text.itcm	000000b0 __kernel_sin
00003b08 g     F .text.itcm	000001d4 BMC::printBoardInfo()
00009180  w    F .text.itcm	0000010c BMCFas::looperControl(unsigned char)
00029074 g     F .text.itcm	00000474 WS2812Serial::show()
6001e25d  w    O .text.progmem	00000001 _serialEventUSB1_default
60001684 g     F .text.code	00000054 TwoWire::setSDA(unsigned char)
2000b398 g     O .bss	00000140 Wire2
2000bb4c g     O .bss	00000004 usb_midi_handleSysExPartial
60057c00 g     O .text.csf	00000c00 hab_csf
20280000 g       .text.csf	00000000 _heap_end
00015230 g     F .text.itcm	00000092 BMC::scrollLayer(bool, bool, unsigned char, unsigned char, unsigned char)
00033f84 g       .ARM.exidx	00000000 __exidx_start
0002ae50  w    F .text.itcm	00000004 _isatty
2000bcb2 g     O .bss	00000001 usb_midi_msg_data1
2000b714 g     O .bss	00000004 EventResponder::firstYield
000258c4 g     F .text.itcm	00000018 Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)
0001a958 g     F .text.itcm	0000000e BMCEditor::getPotCalibrationOffset(unsigned short)
0002de9c g     F .text.itcm	000003d8 _realloc_r
0002eb18 g     F .text.itcm	00000048 __libc_init_array
0002525c  w    F .text.itcm	0000000c TwoWire::available()
00024fbc g     F .text.itcm	00000068 BMC24LC256::begin(BMC24LC256::twiClockFreq_t)
0002b7e4  w    F .text.itcm	00000004 usb_seremu_class::flush()
00033bfc g     F .text.itcm	00000066 _fputwc_r
00026c54  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
200002d0 g     O .data	00000028 __mprec_bigtens
0002ae60  w    F .text.itcm	00000004 abort
000255bc g     F .text.itcm	00000140 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
00000168  w    F .text.itcm	00000180 BMC_SSD1306::getCenteredXY(char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
00026f68 g     F .text.itcm	000000e8 USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)
00024f5c g     F .text.itcm	00000060 BMC24LC256::BMC24LC256(BMC_eeprom_size_t, unsigned char, unsigned int, unsigned char)
0002ae04  w    F .text.itcm	00000034 _sbrk
60052318 g       *ABS*	00000000 _sdataload
000310d0 g     F .text.itcm	00000042 __mcmp
20004ce0 g     O .data	00000004 __brkval
0001aa68 g     F .text.itcm	00000144 BMCEditor::sendNotification(unsigned short, unsigned long, bool, bool)
00002988 g     F .text.itcm	000004e4 BMC::begin()
0001a8b0 g     F .text.itcm	0000000e BMCEditor::getStoreOffset()
000018b4  w    F .text.itcm	0000019c BMCSync::BMCSync(BMCMidi&, BMCMidiClock&, BMCCallbacks&)
60001bf0 g     F .text.code	00000000 _init
00028744 g     F .text.itcm	000000ac MIDIDeviceBase::send_sysex_buffer_has_term(unsigned char const*, unsigned long, unsigned char)
00026044 g     F .text.itcm	000002a0 Adafruit_GFX::fillTriangle(short, short, short, short, short, short, unsigned short)
20003ae4 g     O .data	00000050 SPIClass::spiclass_lpspi1_hardware
0002a160 g     F .text.itcm	0000000e String::~String()
0002bba8 g     F .text.itcm	000000c0 usb_midi_send_sysex_buffer_has_term
00025d28 g     F .text.itcm	000001a0 Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
0002a124 g     F .text.itcm	0000003a String::String(String const&)
00027c58 g     F .text.itcm	00000020 USBHost::driver_ready_for_device(USBDriver*)
00013034 g     F .text.itcm	00000410 BMC::readButtons()
00014e60 g     F .text.itcm	0000001c BMC::layerChanged()
0002c630 g     F .text.itcm	00000018 usb_seremu_write
0001af80  w    F .text.itcm	00000024 BMCMidiMessage::get14Bits(unsigned short)
00011528  w    F .text.itcm	000003f2 BMCAuxJackPot::begin(unsigned char)
6001e298 g     O .text.progmem	00000073 usb_config_descriptor_12
0002cdc0 g     F .text.itcm	00000690 __kernel_rem_pio2
200042c4 g     O .data	00000024 vtable for TwoWire
2000bce0 g       .bss	00000000 _ebss
00009ac4  w    F .text.itcm	00000048 BMCBeatBuddy::tempoControl(unsigned char, bool)
0002588c g     F .text.itcm	0000000e Adafruit_GFX::writePixel(short, short, unsigned short)
2000b0b8 g     O .bss	00000060 Serial3
000266b8 g     F .text.itcm	00000136 Adafruit_GFX::write(unsigned char)
0001a89c g     F .text.itcm	0000000a BMCEditor::setLayer(unsigned char)
600016d8 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
000296bc g     F .text.itcm	00000020 HardwareSerial::availableForWrite()
00015b10  w    F .text.itcm	000001b4 BMCBeatBuddy::incoming(BMCMidiMessage)
00030cc8 g     F .text.itcm	00000040 __hi0bits
00009130  w    F .text.itcm	00000026 BMCFas::tunerOn()
000257b4 g     F .text.itcm	0000000c lpi2c3_isr()
00008048  w    F .text.itcm	00000080 BMCSetLists::scrollSong(bool, bool, unsigned char, unsigned char, unsigned char)
0001d740  w    F .text.itcm	000001a0 BMCEditor::saveLayersAndReloadData(unsigned char)
00012e4c g     F .text.itcm	00000116 BMC::assignButton(BMCButton&, bmcStoreDevice<(unsigned char)6, (unsigned char)6, unsigned char>&)
20201880 g       .bss.dma	00000000 _heap_start
0001801c g     F .text.itcm	000000ac BMC::streamMidi(unsigned char, unsigned char, unsigned char, unsigned char)
2000b8d8 g     O .bss	00000001 __lock___malloc_recursive_mutex
00021f78  w    F .text.itcm	000001f4 BMCEditor::saveLayer(unsigned char)
6001e20c g     O .text.progmem	00000050 TwoWire::i2c4_hardware
0002a170 g     F .text.itcm	00000066 String::copy(char const*, unsigned int)
2000b914 g     O .bss	00000138 __sf
0001a92c g     F .text.itcm	0000000e BMCEditor::getSetListSongOffset(unsigned short)
00000007 g       *ABS*	00000000 _itcm_block_count
00029ae0 g     F .text.itcm	000000d8 HardwareSerial::write9bit(unsigned long)
2000a360 g     O .bss	00000020 endpoint0_transfer_data
0002ab88 g     F .text.itcm	000000f4 pwm_init
0001a0bc g     F .text.itcm	000003a4 BMCEditor::BMCEditor(bmcStore&, BMCMidi&, BMCSettings&, BMCMessenger&)
00007aec  w    F .text.itcm	000002d8 BMCEditor::getDeviceNameText(unsigned char, unsigned short, char*)
000172e0 g     F .text.itcm	00000064 BMC::midiProgramBankTrigger(unsigned char, unsigned char)
000008d4  w    F .text.itcm	00000afa BMCDawLogicControl::sendButtonCommand(unsigned char, unsigned char, bool, bool)
0002530c  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
000135ac g     F .text.itcm	00000210 BMC::controlFirstLed(bool)
0002980c g     F .text.itcm	0000001a HardwareSerial::flush()
0001c014  w    F .text.itcm	00000074 BMCStorage::debugStartTiming(char const*)
0002e618 g     F .text.itcm	0000003e strcat
0002a160 g     F .text.itcm	0000000e String::~String()
60058800 g       .text.csf	00000000 __text_csf_end
0002589c g     F .text.itcm	00000012 Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)
60001928 g     F .text.code	0000005c usb_pll_start
00030f20 g     F .text.itcm	000000c0 __pow5mult
000257c0 g     F .text.itcm	0000000c lpi2c4_isr()
00028390 g     F .text.itcm	00000052 MIDIDeviceBase::timer_event(USBDriverTimer*)
0001a9ac g     F .text.itcm	000000ba BMCEditor::sendToEditor(BMCMidiMessage, bool, bool)
00019418  w    F .text.itcm	00000370 BMCStorage::begin()
0002530c  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00005ef8  w    F .text.itcm	000001ec BMCEditor::saveGlobalAndReloadData()
2000a340 g     O .bss	00000020 endpoint0_transfer_ack
000129f0  w    F .text.itcm	000002c4 BMCButton::read()
0002b738 g     F .text.itcm	00000028 usb_transmit
0001bad0  w    F .text.itcm	00000074 BMCMidiMessage::appendToSysEx32Bits(unsigned long)
000225cc g     F .text.itcm	000000bc BMCEditor::layerSendChangeMessage(bool)
000183b0 g     F .text.itcm	0000020e BMC::readTrigger()
0002969c g     F .text.itcm	00000020 systick_isr
0002eb6c g     F .text.itcm	00000002 __retarget_lock_release_recursive
00018180 g     F .text.itcm	00000050 BMC::streamMidiClockBPM(unsigned short)
00027184 g     F .text.itcm	0000013c USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)
20004c68 g     O .data	00000010 Serial
00029d20 g     F .text.itcm	0000000c IRQHandler_Serial1
20004260 g     O .data	00000024 vtable for HardwareSerial
60001820  w    F .text.code	00000002 startup_early_hook
0001a8d8 g     F .text.itcm	0000000a BMCEditor::getNamesOffset(unsigned short)
00023d70 g     F .text.itcm	00000348 BMCMidi::sendPitchBend(unsigned char, unsigned char, short, unsigned char)
0002b7e8  w    F .text.itcm	00000004 usb_seremu_class::availableForWrite()
00029da0 g     F .text.itcm	0000000c IRQHandler_Serial3
0002c7c0 g     F .text.itcm	00000050 fmod
00006c14 g     F .text.itcm	00000074 BMC::ctrlPreset()
0002c810 g     F .text.itcm	00000080 cos
00022b4c g     F .text.itcm	0000008a BMCEditor::utilitySendAnalogInputCalibrationStatus(bool, bool, bool)
0001e840 g     F .text.itcm	000003bc BMCEditor::incomingMessageEvent(bool)
0002e41c g     F .text.itcm	0000000c __sfp_lock_acquire
0002eb70 g     F .text.itcm	00000000 memchr
00003818  w    F .text.itcm	00000174 BMCTools::getMidiStatusName(unsigned char)
00014e7c g     F .text.itcm	000000a0 BMC::getLayerName(unsigned char, char*)
0002a2c4 g     F .text.itcm	000002f0 set_arm_clock
2000bb04 g     O .bss	00000004 systick_cycle_count
00022704 g     F .text.itcm	00000082 BMCEditor::utilityCommand()
200052c0 g     O .data	00000016 usb_string_serial_number_default
000189a8 g     F .text.itcm	00000010 BMC_SSD1306::~BMC_SSD1306()
0002ee44 g     F .text.itcm	0000020c _free_r
2000bb44 g     O .bss	00000004 usb_midi_handleStop
000178e0 g     F .text.itcm	000005d8 BMC::readMidi()
00000068  w    F .text.itcm	00000022 BMCApi::~BMCApi()
0002e704 g     F .text.itcm	0000000c __locale_mb_cur_max
00031700 g     F .text.itcm	00000016 _wcsrtombs_r
000249b4 g     F .text.itcm	000004b8 BMCMidi::send(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
2000b744 g     O .bss	00000190 __atexit0
0001a0bc g     F .text.itcm	000003a4 BMCEditor::BMCEditor(bmcStore&, BMCMidi&, BMCSettings&, BMCMessenger&)
000004d0  w    F .text.itcm	000000ee bmcStoreGlobal::bmcStoreGlobal()
2000bb20 g     O .bss	00000004 usb_midi_handleControlChange
00024e6c g     F .text.itcm	00000068 BMCMidi::send(unsigned char, BMCMidiMessage, unsigned char)
2000525c g     O .data	00000004 __malloc_sbrk_base
0001a460 g     F .text.itcm	000003d8 BMCEditor::begin()
00017eec g     F .text.itcm	00000034 BMC::getSketchByte(unsigned char)
00025a78 g     F .text.itcm	00000094 Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
0002ae54  w    F .text.itcm	00000006 _lseek
0002ae5c  w    F .text.itcm	00000004 __cxa_pure_virtual
00030fe0 g     F .text.itcm	000000f0 __lshift
0002b708 g     F .text.itcm	00000030 usb_prepare_transfer
0002ac84 g     F .text.itcm	00000180 unused_interrupt_vector
0003260c g     F .text.itcm	00000100 __ssprint_r
2000bc84 g     O .bss	00000004 usb_timer0_callback
60001984 g     F .text.code	00000130 tempmon_init
0002c7b8  w    F .text.itcm	00000002 serialEvent()
00028300 g     F .text.itcm	00000034 USBHost::contribute_Transfers(Transfer_struct*, unsigned long)
0002ed1c g     F .text.itcm	00000088 __register_exitproc
00022390 g     F .text.itcm	0000023c BMCEditor::layerNameMessage(bool)
00001b5c  w    F .text.itcm	0000013a BMC::runPresetChanged()
0002c29c g     F .text.itcm	000000b0 usb_seremu_configure
0001891c g     F .text.itcm	00000074 BMC_SSD1306::drawFastVLine(short, short, short, unsigned short)
00022334 g     F .text.itcm	0000005a BMCEditor::layerMessage(bool)
00018120 g     F .text.itcm	00000060 BMC::streamMidiControl(unsigned char, unsigned char, unsigned char)
00030dc4 g     F .text.itcm	0000015c __multiply
00000024 g       *ABS*	00000000 _teensy_model_identifier
0002e658 g     F .text.itcm	00000064 strncpy
2000b8e0 g     O .bss	00000028 __malloc_current_mallinfo
0002c34c g     F .text.itcm	00000068 usb_seremu_getchar
20003b84 g     O .data	00000050 SPIClass::spiclass_lpspi4_hardware
00031268 g     F .text.itcm	000000d4 __d2b
000189d8 g     F .text.itcm	00000040 BMC_SSD1306::invertDisplay(bool)
00025888 g     F .text.itcm	00000002 Adafruit_GFX::endWrite()
2000b724 g     O .bss	0000001c HardwareSerial::s_serials_with_serial_events
000152e4 g     F .text.itcm	00000024 BMC::nextLayer()
60001b9c g     F .text.code	00000054 _reboot_Teensyduino_
60001824 g     F .text.code	00000002 startup_default_middle_hook
0002de84 g     F .text.itcm	00000018 realloc
00018a90 g     F .text.itcm	0000013c BMC_SSD1306::display()
000078d4  w    F .text.itcm	00000044 BMCTools::getBankLetter(unsigned char, char*)
000275fc g     F .text.itcm	00000240 USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)
00025024 g     F .text.itcm	0000013c BMC24LC256::write(unsigned long, unsigned char*, unsigned int)
0002b084 g     F .text.itcm	000005bc usb_isr
0002e710 g     F .text.itcm	0000000c __cxa_atexit
00027050 g     F .text.itcm	00000134 USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)
00031638 g     F .text.itcm	00000024 _close_r
00017214 g     F .text.itcm	000000cc BMC::midiProgramBankScroll(bool, bool, unsigned char, unsigned char, unsigned char)
2000bb24 g     O .bss	00000004 usb_midi_handleNoteOff
000267fc g     F .text.itcm	00000022 Adafruit_GFX::setFont(GFXfont const*)
000282a4 g     F .text.itcm	0000001c USBHost::allocate_string_buffer()
00014c74 g     F .text.itcm	000001ec BMC::readPixels()
2000af50 g     O .bss	00000050 SPI
6001e260 g     O .text.progmem	00000001 _serialEvent3_default
0002a1d8 g     F .text.itcm	00000026 String::String(char const*)
0002eb64 g     F .text.itcm	00000002 __retarget_lock_close_recursive
000283e4 g     F .text.itcm	000001bc MIDIDeviceBase::claim(Device_struct*, int, unsigned char const*, unsigned long)
000181d0 g     F .text.itcm	000000e4 BMC::runTempoToTap()
00026cf0 g     F .text.itcm	0000014c USBHost::begin()
2000bae0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
2000aff0 g     O .bss	00000050 SPI2
00033a84 g     F .text.itcm	000000cc __swsetup_r
20004208 g     O .data	00000058 vtable for Adafruit_GFX
0002c3b4 g     F .text.itcm	00000044 usb_seremu_peekchar
00025f58 g     F .text.itcm	000000ec Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)
0002783c g     F .text.itcm	0000007c USBHost::add_qh_to_periodic_schedule(Pipe_struct*)
6001e25f g     O .text.progmem	00000001 _serialEvent1_default
0002597c g     F .text.itcm	00000058 Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)
20004e54 g     O .data	00000408 __malloc_av_
2000b740 g     O .bss	00000004 __atexit
0001934c g     F .text.itcm	000000c8 BMCEditor::backupNameMessage(unsigned short)
00007dc4  w    F .text.itcm	00000154 BMCPresets::getName(unsigned short, char*)
000287f0 g     F .text.itcm	000000e8 MIDIDeviceBase::send_sysex_add_term_bytes(unsigned char const*, unsigned long, unsigned char)
00012de0 g     F .text.itcm	0000006c BMC::setupButtons()
00031588 g     F .text.itcm	00000022 __sread
00021d58 g     F .text.itcm	0000021c BMCEditor::globalProcessMessage()
0002de6c g     F .text.itcm	0000000c __malloc_lock
0001a994 g     F .text.itcm	0000000c BMCEditor::getTempoToTapOffset(unsigned short)
00021c90 g     F .text.itcm	00000046 BMCEditor::globalEditorFeedback(bool)
20005400 g     O .data	000002c0 _VectorsRam
00026cc8  w    F .text.itcm	00000002 USBDriver::timer_event(USBDriverTimer*)
00031534 g     F .text.itcm	00000054 _fflush_r
00000068  w    F .text.itcm	00000022 BMCApi::~BMCApi()
00021d10 g     F .text.itcm	00000046 BMCEditor::globalEditorMessenger(bool)
0002d874 g     F .text.itcm	00000078 _calloc_r
00013e80 g     F .text.itcm	000000f4 BMC::handleSetupLeds(BMCLed&, unsigned short)
0001236c  w    F .text.itcm	00000578 BMCButton::begin(unsigned char)
20004284 g     O .data	0000001c vtable for MIDIDeviceBase
00009cc8 g     F .text.itcm	0000032c BMC::handleClockLeds()
0001a910 g     F .text.itcm	0000000c BMCEditor::getPresetOffset(unsigned short)
200052d7 g     O .data	00000001 yield_active_check_flags
0002eb68 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
2000bcaf g     O .bss	00000001 usb_high_speed
000213ec g     F .text.itcm	00000130 BMCEditor::globalStoreAddress(bool)
0001a8d0 g     F .text.itcm	00000008 BMCEditor::getEventsOffset(unsigned short)
0001ebfc g     F .text.itcm	000002e8 BMCEditor::incomingMessageName(bool)
0002e574 g     F .text.itcm	000000a4 memset
200042a0  w    O .data	00000024 vtable for usb_seremu_class
000180c8 g     F .text.itcm	00000058 BMC::streamMidiProgram(unsigned char, unsigned char)
0002a7e0 g     F .text.itcm	00000010 main
00025924 g     F .text.itcm	00000058 Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)
000154e8  w    F .text.itcm	00000128 BMCMidiPortHost::read(BMCMidiMessage&, bool)
2000b90c g     O .bss	00000004 __malloc_max_total_mem
0002eb60 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20200000 g     O .bss.dma	00000073 usb_descriptor_buffer
000004d0  w    F .text.itcm	000000ee bmcStoreGlobal::bmcStoreGlobal()
00028244 g     F .text.itcm	00000010 USBHost::allocate_Device()
0003160c g     F .text.itcm	00000008 __sclose
0001a8f8 g     F .text.itcm	0000000a BMCEditor::getLfoOffset(unsigned short)
0002b780 g     F .text.itcm	00000058 usb_init_serialnumber
00001c98 g     F .text.itcm	00000a64 BMC::BMC()
00025888 g     F .text.itcm	00000002 Adafruit_GFX::startWrite()
00001c98 g     F .text.itcm	00000a64 BMC::BMC()
60001c5c g       .text.code	00000000 __init_array_end
000318f8 g     F .text.itcm	00000cec _dtoa_r
0002d90c g     F .text.itcm	00000560 _malloc_r
2000bc9c g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00031614 g     F .text.itcm	0000001a __ascii_wctomb
2000bb38 g     O .bss	00000004 usb_midi_handleSongPosition
000295d0 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
2000bb1c g     O .bss	00000004 usb_midi_handleContinue
2000bcb3 g     O .bss	00000001 usb_midi_msg_data2
0002a65c g     F .text.itcm	00000054 micros
0000153c  w    F .text.itcm	000001cc BMCFas::update()
000257cc g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
0002eda4 g     F .text.itcm	000000a0 _malloc_trim_r
00021300 g     F .text.itcm	000000b4 BMCEditor::forceDisconnectEditor()
00033c64 g     F .text.itcm	00000106 _wcsnrtombs_l
6001e294 g     O .text.progmem	00000004 string0
00028604 g     F .text.itcm	00000090 MIDIDeviceBase::rx_data(Transfer_struct const*)
00013f74 g     F .text.itcm	00000074 BMC::setupLeds()
00026e3c g     F .text.itcm	000000bc USBDriverTimer::start(unsigned long)
00013824 g     F .text.itcm	0000020c BMC::readHardware()
60001828  w    F .text.code	00000002 startup_late_hook
2000b040 g     O .bss	00000018 SWIMUCal
00005434 g     F .text.itcm	0000093c BMC::midiInDebug(BMCMidiMessage)
0002b020 g     F .text.itcm	00000038 usb_start_sof_interrupts
00007918  w    F .text.itcm	000001d4 BMCEditor::saveStore()
0002e788 g     F .text.itcm	000002dc strcmp
6001e25e  w    O .text.progmem	00000001 _serialEvent_default
2000bcb0 g     O .bss	00000001 usb_midi_msg_cable
20006480 g     O .bss	00003ec0 bmc
000013d0  w    F .text.itcm	0000016c BMCFas::fetchSysEx(unsigned char, unsigned short, unsigned short, unsigned char)
20000000 g     O .data	00000280 endpoint_queue_head
200052ac g     O .data	00000014 usb_string_product_name
0001a8a8 g     F .text.itcm	00000006 BMCEditor::getLayer()
0001520c g     F .text.itcm	0000000e BMC::setLayer(unsigned char, bool, bool)
0002a5b4 g     F .text.itcm	000000a8 delay
2000bc8e g     O .bss	00000002 dma_channel_allocated_mask
0001d13c  w    F .text.itcm	00000026 BMCEditor::backupActive()
00033f80 g     F .fini	00000000 _fini
0001770c  w    F .text.itcm	000001d4 BMCMidi::readBle()
00022a88 g     F .text.itcm	000000c2 BMCEditor::utilitySendPreset(unsigned char, unsigned char, bool)
00023194 g     F .text.itcm	00000020 BMCMidi::sendSysEx(unsigned char, unsigned char*, unsigned short, bool, unsigned char, bool)
000252a4 g     F .text.itcm	0000002a TwoWire::write(unsigned char)
60001020 g     O .text.headers	0000000c BootData
000000d0  w    F .text.itcm	00000098 BMCStopwatch::set(unsigned char, unsigned char, unsigned char)
00024308 g     F .text.itcm	000002ac BMCMidi::sendAfterTouchPoly(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
000240b8 g     F .text.itcm	00000250 BMCMidi::sendAfterTouch(unsigned char, unsigned char, unsigned char, unsigned char)
0002e274 g     F .text.itcm	00000040 sprintf
00029f48 g     F .text.itcm	00000016 Print::print(long)
0002ae64 g     F .text.itcm	00000004 Panic_Temp_isr
0000ad2c  w    F .text.itcm	00000122 BMCDisplay::renderFasFxBlock(BMCDataContainer)
0002baf8 g     F .text.itcm	00000010 usb_midi_write_packed
000189a8 g     F .text.itcm	00000010 BMC_SSD1306::~BMC_SSD1306()
00033d6c g     F .text.itcm	00000024 _wcsnrtombs_r
00017eb8 g     F .text.itcm	00000034 BMC::setSketchByte(unsigned char, unsigned char)
0002e740 g     F .text.itcm	0000002c _write_r
00009444  w    F .text.itcm	000000c4 BMCHelix::snapshotScroll(bool)
00025b0c g     F .text.itcm	000000d4 Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
0002b7e0  w    F .text.itcm	00000004 usb_seremu_class::available()
0001a874 g     F .text.itcm	0000000e BMCEditor::connected()
0002a1d8 g     F .text.itcm	00000026 String::String(char const*)
000027f8  w    F .text.itcm	00000190 BMCDisplay::initOled()
0002bd78 g     F .text.itcm	000000a8 usb_midi_read_message
20005270 g     O .data	00000004 _impure_ptr
0001a94c g     F .text.itcm	0000000c BMCEditor::getGlobalLedOffset(unsigned short)
00031404 g     F .text.itcm	00000130 __sflush_r
0002d648 g     F .text.itcm	0000010c scalbn
2000b118 g     O .bss	00000140 Wire
0002e434 g     F .text.itcm	00000046 _fwalk_sglue
2000bb58 g     O .bss	00000004 usb_midi_handleTuneRequest
60001c38 g       .text.code	00000000 __preinit_array_end
0001d458  w    F .text.itcm	0000017c BMCEditor::saveLFO(unsigned char)
000005c0  w    F .text.itcm	00000120 BMCPresets::set(unsigned char, unsigned char, bool)
0001a8e4 g     F .text.itcm	00000008 BMCEditor::getPortPresetsOffset(unsigned short)
0000a980  w    F .text.itcm	000003ac BMCDisplay::renderBlock(BMCDataContainer)
2000bcb1 g     O .bss	00000001 usb_midi_msg_channel
0002f050 g     F .text.itcm	0000002a __ascii_mbtowc
000060e4  w    F .text.itcm	000000d8 BMCSync::assignSettings()
0000b944 g     F .text.itcm	00005be4 BMC::processEvent(unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)
00019414 g     F .text.itcm	00000002 BMCEditor::backupLayerName(unsigned short)
0002b058 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00014a40 g     F .text.itcm	00000232 BMC::assignPixels()
000081f8  w    F .text.itcm	000000bc BMCSetLists::getSongName(unsigned char, char*)
00025288  w    F .text.itcm	00000018 TwoWire::peek()
00029bbc g     F .text.itcm	00000164 HardwareSerial::IRQHandler()
000252a0  w    F .text.itcm	00000002 TwoWire::flush()
0000008c g     F .text.itcm	0000000c setup
20004a98 g     O .data	00000084 usb_descriptor_list
0002151c g     F .text.itcm	000000ce BMCEditor::globalSendBackupStatus()
00007f18  w    F .text.itcm	0000006c BMCSetLists::set(unsigned char)
000185c4  w    F .text.itcm	00000002 Print::flush()
2000bb40 g     O .bss	00000004 usb_midi_handleStart
000262e4 g     F .text.itcm	000003d4 Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)
00006200 g     F .text.itcm	000004b0 BMC::assignSettings()
0002bc68 g     F .text.itcm	00000110 usb_midi_send_sysex_add_term_bytes
000182b4 g     F .text.itcm	000000fc BMC::readTimedEvent()
00028294 g     F .text.itcm	00000010 USBHost::free_Transfer(Transfer_struct*)
20048000 g       .text.csf	00000000 _estack
0002959c g     F .text.itcm	00000034 DMAChannel::release()
00028264 g     F .text.itcm	00000010 USBHost::allocate_Pipe()
000288d8 g     F .text.itcm	000005f0 MIDIDeviceBase::read(unsigned char)
00012f64 g     F .text.itcm	00000064 BMC::assignButtons()
0000b654  w    F .text.itcm	000002f0 BMCDisplay::renderFasStatus(BMCDataContainer)
00008cc0  w    F .text.itcm	0000011a BMCDawLogicControl::sendEncoderScrollAssign(bool)
000247cc g     F .text.itcm	000001e8 BMCMidi::sendSongSelect(unsigned char, unsigned char, unsigned char)
000006e0  w    F .text.itcm	000000e4 BMCSetLists::setPart(unsigned char)
6000170c g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
20005264 g     O .data	0000000c __sglue
0001a85c g     F .text.itcm	00000016 BMCEditor::dataForBMCAvailable()
000252d0 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
000285a0 g     F .text.itcm	00000062 MIDIDeviceBase::init()
00029f7c  w    F .text.itcm	0000001c _write
200056c0 g       .data	00000000 _edata
00008384  w    F .text.itcm	0000093a BMCDawLogicControl::getLedState(unsigned char, unsigned char)
0001912c g     F .text.itcm	0000010c BMCEditor::backupGlobalSettings(unsigned short)
00003cdc g     F .text.itcm	00000170 BMC::setupDebug()
00033b50 g     F .text.itcm	000000aa __fputwc
00009158  w    F .text.itcm	00000026 BMCFas::tunerOff()
00013444 g     F .text.itcm	00000168 BMC::setupHardware()
000257a8 g     F .text.itcm	0000000c lpi2c1_isr()
00029828 g     F .text.itcm	00000040 nvic_execution_priority()
00023184 g     F .text.itcm	00000010 BMCMidi::sendRealTime(unsigned char, unsigned char, unsigned char)
2000bb18 g     O .bss	00000004 usb_midi_handleClock
00028274 g     F .text.itcm	00000010 USBHost::free_Pipe(Pipe_struct*)
000095a0  w    F .text.itcm	00000050 BMCHelix::toggleSnapshot(unsigned char, unsigned char)
0002a928 g     F .text.itcm	00000062 ultoa
60001764 g     F .text.code	00000068 TwoWire::begin()
00019da0  w    F .text.itcm	0000031c BMCEditor::getStore()
00022688 g     F .text.itcm	00000046 BMCEditor::layerMessageLayerCopySwap(bool)
000007c4  w    F .text.itcm	00000110 BMCSetLists::setSong(unsigned char)
00025ec8 g     F .text.itcm	00000090 Adafruit_GFX::fillCircle(short, short, short, unsigned short)
0001a988 g     F .text.itcm	0000000a BMCEditor::getTriggerOffset(unsigned short)
000315ac g     F .text.itcm	0000003e __swrite
0002a924 g     F .text.itcm	00000004 operator new(unsigned int)
00029654 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
0001a968 g     F .text.itcm	0000000e BMCEditor::getAuxJackOffset(unsigned short)
20005260 g     O .data	00000004 __malloc_trim_threshold
000002e8  w    F .text.itcm	000001e8 BMCLFO::getWave(unsigned long)
0001a8ec g     F .text.itcm	0000000a BMCEditor::getShortcutsOffset(unsigned short)
00022788 g     F .text.itcm	0000008a BMCEditor::utilitySendFasState(unsigned char, bool)
000325e4 g     F .text.itcm	00000028 fiprintf
00009ff4  w    F .text.itcm	000002d0 bool BMCDisplayHandlerFas::renderLooper<BMC_SSD1306>(BMC_SSD1306&, unsigned char&, BMCDiplayHandlerData, bool)
00032784 g     F .text.itcm	00000f8c _vfiprintf_r
0001521c g     F .text.itcm	00000012 BMC::reloadLayer()
0000398c  w    F .text.itcm	0000017c BMCEditor::printDevicesInfo()
00031114 g     F .text.itcm	00000154 __mdiff
00029778 g     F .text.itcm	00000092 HardwareSerial::read()
20003b34 g     O .data	00000050 SPIClass::spiclass_lpspi3_hardware
00024f0c g     F .text.itcm	00000028 BMCMidi::scrollCC(unsigned char, unsigned char, unsigned char, unsigned char, bool, bool, unsigned char, unsigned char)
00026a9c g     F .text.itcm	000000dc _spi_dma_rxISR1()
2000bb2c g     O .bss	00000004 usb_midi_handlePitchChange
0001191c  w    F .text.itcm	00000388 BMCAuxJackButton::begin(unsigned char)
00002e6c g     F .text.itcm	00000804 BMC::update()
00026ef8 g     F .text.itcm	00000070 USBDriverTimer::stop()
20004b40 g     O .data	00000120 _impure_data
0001a91c g     F .text.itcm	0000000e BMCEditor::getSetListOffset(unsigned short)
00007604  w    F .text.itcm	00000120 BMCBuildData::getSketchByteData(unsigned char)
0002e428 g     F .text.itcm	0000000c __sfp_lock_release
00028364 g     F .text.itcm	00000024 MIDIDeviceBase::tx_callback(Transfer_struct const*)
00008ddc  w    F .text.itcm	000002d4 BMCDawLogicControl::sendEncoderScrolling(unsigned char, unsigned char, bool, unsigned char)
000090fc  w    F .text.itcm	00000032 BMCFas::isBlockEngaged(unsigned short)
2000bb54 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
200043a0 g     O .data	00000101 _ctype_
00022bd8 g     F .text.itcm	00000102 BMCEditor::utilitySendAnalogInputCalibrationActivity(unsigned char, unsigned short, unsigned short, unsigned short, bool)
00003e4c g     F .text.itcm	000015e8 BMC::readDebug()
0002ae38  w    F .text.itcm	00000004 _read
200061e0 g     O .bss	000002a0 BMC_ST7735_t3::_dma_data
60001c38 g       .text.code	00000000 __init_array_start
0002a238 g     F .text.itcm	0000008c analogRead
20004c60 g     O .data	00000004 F_BUS_ACTUAL
2000ba50 g     O .bss	00000004 em_rx_tx
2000bb60 g     O .bss	00000122 usb_midi_msg_sysex
20004890 g     O .data	0000001c pin_to_channel
000061bc g     F .text.itcm	00000044 BMC::assignStoreData()
00023818 g     F .text.itcm	000002ac BMCMidi::sendNoteOn(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00003738  w    F .text.itcm	000000e0 BMCTools::printPortsNames(unsigned char)
0000b32c  w    F .text.itcm	00000328 BMCDisplay::renderFasLooperIcon(BMCDataContainer)
00033d90 g     F .text.itcm	000000d8 __smakebuf_r
0001e6e4 g     F .text.itcm	0000015a BMCEditor::incomingMessageLinks()
00000000 g       .text.itcm	00000000 _stext
000294e8 g     F .text.itcm	000000b4 DMAChannel::begin(bool)
00009508  w    F .text.itcm	00000098 BMCHelix::setSnapshot(unsigned char)
00013a30  w    F .text.itcm	00000450 BMCLed::begin(unsigned char)
0002174c g     F .text.itcm	00000330 BMCEditor::globalSettingsMessage(bool)
000245b4 g     F .text.itcm	00000218 BMCMidi::sendSongPosition(unsigned char, unsigned short, unsigned char)
0002ec40 g     F .text.itcm	000000dc strlen
00028254 g     F .text.itcm	00000010 USBHost::free_Device(Device_struct*)
00011edc g     F .text.itcm	00000490 BMC::readAuxJacks()
2000bcb6 g     O .bss	00000001 usb_seremu_online
000185c8 g     F .text.itcm	000000f2 BMC_SSD1306::drawPixel(short, short, unsigned short)
6001e264 g     O .text.progmem	00000018 usb_string_product_name_default
00022814 g     F .text.itcm	00000272 BMCEditor::utilitySendStateBits(unsigned char, bool)
0001a844 g     F .text.itcm	00000016 BMCEditor::readyToReload()
0001e464  w    F .text.itcm	00000280 BMCEditor::changeStoreLocal(unsigned char)
00007724  w    F .text.itcm	000001b0 BMCTools::getSketchByteFormat(char*, unsigned char, unsigned char)
60001824  w    F .text.code	00000002 startup_middle_hook
00029efc g     F .text.itcm	0000004c Print::print(String const&)
60001830 g     F .text.code	000000f8 configure_cache
0002814c g     F .text.itcm	00000080 USBHost::disconnect_Device(Device_struct*)
00006c88 g     F .text.itcm	000000fa BMC::editorRead()
000286a0 g     F .text.itcm	000000a2 MIDIDeviceBase::write_packed(unsigned long)
00029868 g     F .text.itcm	00000278 HardwareSerial::begin(unsigned long, unsigned short)
0000a314  w    F .text.itcm	0000033c BMCDisplay::renderMidi(BMCDataContainer)
00015380  w    F .text.itcm	00000168 BMCTunerData::setData(unsigned char, unsigned char, unsigned char)
60001c38 g       .text.code	00000000 __preinit_array_start
0002b760 g     F .text.itcm	0000001c usb_receive
0001a838 g     F .text.itcm	0000000a BMCEditor::update()
00030d08 g     F .text.itcm	00000060 __lo0bits
0001b2b4  w    F .text.itcm	00000048 BMCMidiMessage::appendToSysEx16Bits(unsigned short)
0002c41c g     F .text.itcm	00000064 tx_queue_transfer
0001411c  w    F .text.itcm	00000328 void BMC::handleLed<(unsigned short)5>(BMCLed&, BMCBitStates<(unsigned short)5>&, unsigned char, unsigned char)
00027a04 g     F .text.itcm	0000021c USBHost::delete_Pipe(Pipe_struct*)
00058800 g       *ABS*	00000000 _flashimagelen
00025cf8 g     F .text.itcm	00000030 Adafruit_GFX::Adafruit_GFX(short, short)
00014794  w    F .text.itcm	0000029c BMCPixels::write(unsigned short, unsigned char)
0002ac80  w    F .text.itcm	00000002 serialEvent3()
0002d868 g     F .text.itcm	0000000a __aeabi_atexit
0001e2dc  w    F .text.itcm	000000c0 BMCEditor::backupCancel()
2000bb3c g     O .bss	00000004 usb_midi_handleSongSelect
0002c794 g     F .text.itcm	00000024 rtc_get
000267f0 g     F .text.itcm	0000000c Adafruit_GFX::setTextSize(unsigned char)
00031718 g     F .text.itcm	00000078 frexp
00029698 g     F .text.itcm	00000004 pendablesrvreq_isr
0000928c  w    F .text.itcm	000001b8 BMCHelix::command(unsigned char, unsigned char, unsigned char)
0001afa4  w    F .text.itcm	00000060 BMCMidiMessage::prepareEditorMessage(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
00024ed4 g     F .text.itcm	00000038 BMCMidi::toggleCC(unsigned char, unsigned char, unsigned char)
000185c0  w    F .text.itcm	00000004 Print::availableForWrite()
20004ce8 g     O .data	0000016c __global_locale
000278b8 g     F .text.itcm	0000014c USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
20004194  w    O .data	0000001c vtable for MIDIDevice
2000b8dc g     O .bss	00000001 __lock___sfp_recursive_mutex
00025900 g     F .text.itcm	00000022 Adafruit_GFX::setRotation(unsigned char)
000215ec g     F .text.itcm	00000160 BMCEditor::globalBackupMessage(bool)
00029f98 g     F .text.itcm	00000028 Print::printNumber(unsigned long, unsigned char, unsigned char)
000128e4  w    F .text.itcm	0000010c BMCButton::update()
0002b6a4 g     F .text.itcm	00000064 usb_config_tx
0002ae3c  w    F .text.itcm	00000006 _close
00001708  w    F .text.itcm	000001ac BMCBeatBuddy::update()
2000bb10 g     O .bss	00000004 usb_midi_handleActiveSensing
0002d8fc g     F .text.itcm	00000010 free
00020e54 g     F .text.itcm	0000029c BMCEditor::connectEditor()
00030c24 g     F .text.itcm	000000a4 __multadd
00030c10 g     F .text.itcm	00000012 _Bfree
200052c0  w    O .data	00000016 usb_string_serial_number
00024f5c g     F .text.itcm	00000060 BMC24LC256::BMC24LC256(BMC_eeprom_size_t, unsigned char, unsigned int, unsigned char)
000137bc g     F .text.itcm	00000068 BMC::assignHardware()


